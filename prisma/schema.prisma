generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String             @id @default(cuid())
  name                String?
  email               String?            @unique
  emailVerified       DateTime?
  image               String?
  role                Role               @default(USER)
  complaintRecipient  Boolean            @default(false)
  suggestionRecipient Boolean            @default(false)
  accounts            Account[]
  sentMessages        Message[]
  comments            MessageComment[]
  messages            MessageRecipient[]
  sessions            Session[]
}

model Message {
  id          String             @id @default(cuid())
  subject     String
  messageBody String
  messageType MessageType
  dateCreated DateTime           @default(now())
  dateUpdated DateTime           @updatedAt
  senderId    String?
  sender      User?              @relation(fields: [senderId], references: [id], onDelete: Cascade)
  comments    MessageComment[]
  recipients  MessageRecipient[]
}

model MessageRecipient {
  id          String  @id @default(cuid())
  messageId   String
  recipientId String
  message     Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  recipient   User    @relation(fields: [recipientId], references: [id], onDelete: Cascade)
}

model MessageComment {
  id          String   @id @default(cuid())
  comment     String
  commenterId String
  messageId   String
  dateCreated DateTime @default(now())
  lastUpdated DateTime @updatedAt
  commenter   User     @relation(fields: [commenterId], references: [id], onDelete: Cascade)
  message     Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  REVIEWER
  ADMIN
}

enum MessageType {
  COMPLAINT
  SUGGESTION
}
